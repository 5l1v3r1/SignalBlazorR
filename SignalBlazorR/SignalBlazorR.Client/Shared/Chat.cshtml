@using Microsoft.JSInterop
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject LoginService LoginService
@implements IDisposable

@if (string.IsNullOrWhiteSpace(LoginService.UserData?.Name))
{
    <button class="btn btn-primary" onclick="@ログイン画面へ移動">ログインしとくー</button>
}
else
{
    <p>
        名前：<input type="text" bind="Msg.name" /><br />
        発言：<input type="text" bind="Msg.message" /><br />
        <label>
            <input type="checkbox" bind="IsAll" title="あああ" />全体発言する？
        </label>
        <button class="btn btn-primary" onclick="@発言">はつげん</button><br />
        <button class="btn btn-primary" onclick="@SetMyIns">インスタンス設定</button><br />
    </p>
    <p>@Msg.room</p>
    <table class='table'>
        <thead>
            <tr>
                <th>名前</th>
                <th>発言</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Message in MessageList)
            {
                <tr>
                    <td>@Message.name</td>
                    <td>@Message.message</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {

    static SimpleMessage Msg = new SimpleMessage();
    static List<SimpleMessage> MessageList = new List<SimpleMessage>();

    static BlazorComponent myIns;

    string Assembly { get; set; }
    string NameSpace { get; set; }
    string Type { get; set; }

    bool IsAll { get; set; } = false;

    protected override void OnInit()
    {
        myIns = this;
        this.Assembly = this.GetType().Assembly.GetName().Name;
        this.NameSpace = this.GetType().Namespace;
        this.Type = this.GetType().Name;
        Console.WriteLine($"Assembly={Assembly}\r\nNameSpace={NameSpace}\r\nType={Type}");
        var url = UriHelper.GetAbsoluteUri();
        //url = $"{url}{(url.EndsWith("/") ? "index" : string.Empty)}";
        var uri = new Uri(url);

        //if (Msg.room != uri.AbsolutePath)
        if (!string.IsNullOrWhiteSpace(LoginService.UserData?.Name))
        {
            Msg.name = LoginService.UserData.Name;
            Msg.room = uri.AbsolutePath;
            this.SetMyIns();
            JSRuntime.Current.InvokeAsync<bool>("Chat.グループ追加", Msg);
        }

        Console.WriteLine($"Room={Msg.room}");
    }

    public void Dispose()
    {

        if (!string.IsNullOrWhiteSpace(Msg.room)
            && !string.IsNullOrWhiteSpace(LoginService.UserData?.Name))
        {
            this.ClearMyIns();
            JSRuntime.Current.InvokeAsync<bool>("Chat.グループ離脱", Msg);
        }

    }


    void 発言()
    {
        var sndMsg = Msg.Clone();
        if (this.IsAll)
        {
            sndMsg.room = SimpleMessage.AllGroup;
        }
        JSRuntime.Current.InvokeAsync<bool>("Chat.迷信", sndMsg);
    }

    public static bool jusin(string smsg)
    {
        Console.WriteLine($"smsg「{smsg}」");
        var msg = Json.Deserialize<SimpleMessage>(smsg);
        Console.WriteLine($"msg.name「{msg.name}」msg.message「{msg.message}」");
        MessageList.Add(msg);
        ((Chat)myIns).更新通知();
        return true;
    }

    public void 更新通知()
    {
        // 手動での更新通知
        this.StateHasChanged();
    }

    public bool jusini(string smsg)
    {
        Console.WriteLine($"smsg「{smsg}」");
        var msg = Json.Deserialize<SimpleMessage>(smsg);
        Console.WriteLine($"msg.name「{msg.name}」msg.message「{msg.message}」");
        MessageList.Add(msg);
        this.StateHasChanged();
        return true;
    }

    private void SetMyIns()
    {
        Console.WriteLine("SetMyIns()");
        JSRuntime.Current.InvokeAsync<bool>("Chat.Chatインスタンス取得", "");
    }

    private void ClearMyIns()
    {
        Console.WriteLine("ClearMyIns()");
        JSRuntime.Current.InvokeAsync<bool>("CChat.hatインスタンス解除", "");
    }

    public static BlazorComponent GetPageObject()
    {
        return myIns;
    }

    void ログイン画面へ移動()
    {
        UriHelper.NavigateTo("/");
    }

}
