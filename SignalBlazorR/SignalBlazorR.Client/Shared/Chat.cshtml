@using SignalBlazorR.Shared;
@using Microsoft.AspNetCore.Blazor;
@using Microsoft.AspNetCore.Blazor.Browser.Interop;

<p>
	名前：<input type="text" @bind(Msg.name)><br />
	発言：<input type="text" @bind(Msg.message)><br />
	<label>
		<input type="checkbox" @bind(IsAll) />全体発言する？
	</label>
	<button @onclick(発言)>はつげん</button><br />
</p>

<table class='table'>
	<thead>
		<tr>
			<th>名前</th>
			<th>発言</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var Message in MessageList)
		{
		<tr>
			<td>@Message.name</td>
			<td>@Message.message</td>
		</tr>
		}
	</tbody>
</table>

<script>

	// コネクション作成
	let connection = new signalR.HubConnection('/chathub');

	// 受信処理
	connection.on('AddMessage', Msg => {
		console.log("受信");
		for (var key in Msg) {
			console.log(`${key}＝${Msg[key]}`);
		}
		let AddMessageSMethod = Blazor.platform.findMethod(
			"SignalBlazorR.Client",
			"SignalBlazorR.Client.Shared",
			"Chat",
			"jusin"
		);
		console.log(`${Msg.name}「${Msg.message}」`);
		var ts = Blazor.platform.toDotNetString(JSON.stringify(Msg));
		console.log(ts);
		Blazor.platform.callMethod(AddMessageSMethod, null, [ts]);
	});

	// グループ追加処理
	Blazor.registerFunction("グループ追加", Msg => {
		console.log(`グループ追加「${Msg.room}」`);
		connection.invoke("JoinGroup", Msg)
			.catch(e => console.log(e));
		return true;
	});

	// グループ離脱処理
	Blazor.registerFunction("グループ離脱", Msg => {
		connection.invoke("LeaveGroup", Msg)
			.catch(e => console.log(e));
		return true;
	});

	// 送信処理
	Blazor.registerFunction("迷信", Msg => {
		connection.invoke("PostMessage", Msg)
			.catch(e => console.log(e));
		return true;
	});

	// 接続開始
	connection.start()
		.then(function () {
			console.log("ルーム参加");
			var InitMethod = Blazor.platform.findMethod(
				"SignalBlazorR.Client",
				"SignalBlazorR.Client.Shared",
				"Chat",
				"JsInited"
			);
			Blazor.platform.callMethod(InitMethod, null, []);

		})
		.catch(e => console.log(e));


</script>

@functions {

	public SimpleMessage Msg = new SimpleMessage();
	List<SimpleMessage> MessageList = new List<SimpleMessage>();

	public static Chat myIns;

	string Assembly { get; set; }
	string NameSpace { get; set; }
	string Type { get; set; }

	bool IsAll { get; set; } = false;

	protected override void OnInit()
	{
		myIns = this;
		this.Assembly = this.GetType().Assembly.GetName().Name;
		this.NameSpace = this.GetType().Namespace;
		this.Type = this.GetType().Name;
		Console.Out.WriteLine($"Assembly={Assembly}\r\nNameSpace={NameSpace}\r\nType={Type}");
		var url = new Microsoft.AspNetCore.Blazor.Browser.Services.BrowserUriHelper().GetAbsoluteUri();
		url = $"{url}{(url.EndsWith("/") ? "index" : string.Empty)}";
		var uri = new Uri(url);
		Msg.room = uri.AbsolutePath;
		Console.Out.WriteLine($"Room={Msg.room}");
	}

	protected void 発言()
	{
		var sndMsg = this.Msg.Clone();
		if(this.IsAll)
		{
			sndMsg.room = SimpleMessage.AllGroup;
		}
		RegisteredFunction.Invoke<bool>("迷信", sndMsg);
	}

	public static bool JsInited()
	{
		RegisteredFunction.Invoke<bool>("グループ追加", myIns.Msg);
		return true;
	}

	public static bool jusin(string smsg)
	{
		//RegisteredFunction.Invoke<bool>("log", $"「jusin」よばれたー\r\n{smsg}");
		Console.Out.WriteLine($"smsg「{smsg}」");
		//var msg = JsonConvert.DeserializeObject<SimpleMessage>(smsg);
		var msg = JsonUtil.Deserialize<SimpleMessage>(smsg);
		//Console.Out.WriteLine($"smsg「{smsg}」2");
		Console.Out.WriteLine($"msg.name「{msg.name}」msg.message「{msg.message}」");
		myIns.AddMessage(msg);
		return true;
	}

	public void AddMessage(SimpleMessage smsg)
	{
		this.MessageList.Add(smsg);
		Console.Out.WriteLine("「AddMessage」よばれたー");
		// 手動での更新通知
		this.StateHasChanged();
	}

}
