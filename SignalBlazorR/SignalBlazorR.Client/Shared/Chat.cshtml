@using SignalBlazorR.Shared;
@using Microsoft.AspNetCore.Blazor;
@using Microsoft.AspNetCore.Blazor.Browser.Interop;

<h1>ちゃっとてすと</h1>

<p>
	名前：<input type="text" @bind(Msg.name)><br />
	発言：<input type="text" @bind(Msg.message)><br />
	<label>
		<input type="checkbox" @bind(IsAll) />全体発言する？
	</label>
	<button @onclick(発言)>はつげん</button><br />
</p>

<table class='table'>
	<thead>
		<tr>
			<th>名前</th>
			<th>発言</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var Message in MessageList)
		{
			<tr>
				<td>@Message.name</td>
				<td>@Message.message</td>
			</tr>
		}
	</tbody>
</table>

@functions {

	static SimpleMessage Msg = new SimpleMessage();
	static List<SimpleMessage> MessageList = new List<SimpleMessage>();
	bool IsAll { get; set; } = false;

	public static Chat myIns;

	protected override void OnInit()
	{
		myIns = this;
		var Assembly = this.GetType().Assembly.GetName().Name;
		var NameSpace = this.GetType().Namespace;
		var Type = this.GetType().Name;
		Console.Out.WriteLine($"Assembly={Assembly}\r\nNameSpace={NameSpace}\r\nType={Type}");

		var url = new Microsoft.AspNetCore.Blazor.Browser.Services.BrowserUriHelper().GetAbsoluteUri();
		url = $"{url}{(url.EndsWith("/") ? "index" : string.Empty)}";
		var uri = new Uri(url);

		if (Msg.room != uri.AbsolutePath)
		{
			if (!string.IsNullOrWhiteSpace(Msg.room))
			{
				RegisteredFunction.Invoke<bool>("グループ離脱", Msg);
			}

			Msg.room = uri.AbsolutePath;
			RegisteredFunction.Invoke<bool>("グループ追加", Msg);

		}

		Console.Out.WriteLine($"Room={Msg.room}");
	}

	protected void 発言()
	{
		var sndMsg = Msg.Clone();
		if (this.IsAll)
		{
			sndMsg.room = SimpleMessage.AllGroup;
		}
		RegisteredFunction.Invoke<bool>("迷信", sndMsg);
	}

	public static bool jusin(string smsg)
	{
		//RegisteredFunction.Invoke<bool>("log", $"「jusin」よばれたー\r\n{smsg}");
		Console.Out.WriteLine($"smsg「{smsg}」");
		//var msg = JsonConvert.DeserializeObject<SimpleMessage>(smsg);
		var msg = JsonUtil.Deserialize<SimpleMessage>(smsg);
		//Console.Out.WriteLine($"smsg「{smsg}」2");
		Console.Out.WriteLine($"msg.name「{msg.name}」msg.message「{msg.message}」");
		MessageList.Add(msg);
		myIns.AddMessage(msg);
		return true;
	}

	public void AddMessage(SimpleMessage smsg)
	{
		//RegisteredFunction.Invoke<bool>("log", "「AddMessage」よばれたー");
		//this.MessageList.Add(smsg);
		Console.Out.WriteLine("「AddMessage」よばれたー");
		// 手動での更新通知
		this.StateHasChanged();
	}

}
